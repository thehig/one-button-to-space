# Task ID: 11
# Title: Implement Mouse Wheel Camera Zoom for Desktop Game View
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Add a camera zoom feature to the main game view that allows players to zoom in and out using the mouse wheel. This functionality should be optimized for desktop environments.
# Details:
Implement a smooth camera zoom system controlled by the mouse wheel scroll action. The zoom should be centered on the current mouse position to provide an intuitive experience. Key implementation points:

1. Create a zoom controller that captures mouse wheel events (deltaY property)
2. Define minimum and maximum zoom levels (suggested: 0.5x to 2.0x of default view)
3. Implement smooth zoom transitions using interpolation (e.g., lerp function with configurable speed)
4. Ensure the camera maintains focus on the point under the cursor during zoom
5. Add a visual indicator showing current zoom level (optional)
6. Implement zoom speed configuration (pixels per scroll unit)
7. Handle edge cases such as zooming at map boundaries
8. Add fallback controls for users without mouse wheels (e.g., keyboard shortcuts)
9. Optimize performance by limiting zoom calculation frequency
10. Ensure the feature only activates when the game view has focus

The implementation should use the existing camera system and integrate with the current rendering pipeline without introducing performance issues.

# Test Strategy:
Testing should verify both functionality and user experience aspects of the zoom feature:

1. Unit Tests:
   - Verify zoom level changes correctly based on scroll input
   - Confirm zoom stays within defined min/max boundaries
   - Test that zoom center calculation works with different mouse positions

2. Integration Tests:
   - Ensure zoom works with all game view content types
   - Verify performance remains stable during rapid zoom actions
   - Test compatibility with other camera controls (pan, rotate)

3. User Experience Tests:
   - Conduct playtests to evaluate zoom smoothness and intuitiveness
   - Test on various desktop configurations (different OS, mouse types)
   - Verify zoom behavior at game boundaries and with different scene densities

4. Edge Cases:
   - Test behavior when rapidly scrolling
   - Verify correct handling when switching between windows/losing focus
   - Test with extremely large and small game worlds

Acceptance Criteria: Zoom should feel smooth and intuitive, maintain 60+ FPS during zoom operations, correctly focus on mouse position, and work consistently across all supported desktop environments.

# Subtasks:
## 1. Implement Mouse Wheel Event Capture and Basic Zoom Logic [done]
### Dependencies: None
### Description: Create the foundation for the zoom system by capturing mouse wheel events and implementing the basic zoom level adjustment logic.
### Details:
1. Create a new ZoomController class/component that will handle all zoom functionality.
2. Add event listeners for the 'wheel' event on the game canvas element.
3. Extract the deltaY property from wheel events to determine zoom direction and intensity.
4. Implement a zoom level variable that changes based on wheel input (increase/decrease).
5. Define and enforce minimum (0.5x) and maximum (2.0x) zoom constraints.
6. Add simple getter/setter methods for the zoom level.
7. Test by logging zoom level changes to console when scrolling the mouse wheel.
8. Ensure the controller only responds when the game view has focus by checking document.activeElement or similar.

<info added on 2025-04-23T20:38:12.344Z>
# Implementation Plan

```typescript
// src/game/controllers/ZoomController.ts
export class ZoomController {
  private scene: Phaser.Scene;
  private currentZoom: number = 1.0;
  private readonly minZoom: number = 0.5;
  private readonly maxZoom: number = 2.0;
  private readonly zoomStep: number = 0.05;
  
  constructor(scene: Phaser.Scene) {
    this.scene = scene;
    this.init();
  }
  
  private init(): void {
    const canvas = this.scene.game.canvas;
    canvas.addEventListener('wheel', this.handleWheelEvent.bind(this));
  }
  
  private handleWheelEvent(event: WheelEvent): void {
    // Only process wheel events when canvas has focus
    if (document.activeElement !== this.scene.game.canvas) return;
    
    // Prevent default scrolling behavior
    event.preventDefault();
    
    // Calculate new zoom level based on wheel direction
    const zoomDirection = -Math.sign(event.deltaY);
    const targetZoom = this.currentZoom + (zoomDirection * this.zoomStep);
    
    // Apply zoom constraints
    this.currentZoom = Phaser.Math.Clamp(targetZoom, this.minZoom, this.maxZoom);
    
    console.log('Zoom level:', this.currentZoom);
  }
  
  public getZoomLevel(): number {
    return this.currentZoom;
  }
  
  public setZoomLevel(level: number): void {
    this.currentZoom = Phaser.Math.Clamp(level, this.minZoom, this.maxZoom);
  }
  
  public destroy(): void {
    // Clean up event listener when controller is destroyed
    this.scene.game.canvas.removeEventListener('wheel', this.handleWheelEvent.bind(this));
  }
}
```

Integration example in MainScene:
```typescript
// In MainScene.ts
import { ZoomController } from '../controllers/ZoomController';

// Inside create() method
this.zoomController = new ZoomController(this);

// In scene shutdown/destroy
this.zoomController.destroy();
```
</info added on 2025-04-23T20:38:12.344Z>

<info added on 2025-04-23T20:38:45.479Z>
<info added on 2025-04-24T15:22:45.000Z>
## Performance Considerations

When implementing the zoom controller, consider these performance optimizations:

1. **Debounce wheel events**: Mouse wheel events fire rapidly, which can cause performance issues:

```typescript
private lastWheelEventTime: number = 0;
private readonly wheelEventThreshold: number = 50; // ms

private handleWheelEvent(event: WheelEvent): void {
  // Skip processing if events are firing too rapidly
  const now = Date.now();
  if (now - this.lastWheelEventTime < this.wheelEventThreshold) return;
  this.lastWheelEventTime = now;
  
  // Rest of wheel event handling...
}
```

2. **Smooth zoom transitions**: For better UX, implement smooth zoom transitions rather than immediate jumps:

```typescript
private targetZoom: number = 1.0;

// In your scene's update method
public update(time: number, delta: number): void {
  // Smoothly interpolate current zoom toward target zoom
  if (this.currentZoom !== this.targetZoom) {
    const zoomSpeed = 0.1;
    this.currentZoom = Phaser.Math.Linear(
      this.currentZoom,
      this.targetZoom,
      zoomSpeed
    );
    
    // Apply zoom to camera
    this.scene.cameras.main.setZoom(this.currentZoom);
  }
}

// Then in handleWheelEvent, set targetZoom instead of currentZoom
this.targetZoom = Phaser.Math.Clamp(targetZoom, this.minZoom, this.maxZoom);
```

3. **Zoom around cursor position**: For natural zooming behavior, implement zooming centered on cursor position:

```typescript
private zoomAroundCursor(newZoom: number): void {
  const camera = this.scene.cameras.main;
  const oldZoom = camera.zoom;
  
  // Get cursor position in world coordinates before zoom
  const mouseX = this.scene.input.activePointer.worldX;
  const mouseY = this.scene.input.activePointer.worldY;
  
  // Apply new zoom
  camera.setZoom(newZoom);
  
  // Calculate offset to keep cursor at same world position
  const zoomFactor = newZoom / oldZoom;
  const newX = mouseX * zoomFactor;
  const newY = mouseY * zoomFactor;
  
  // Adjust camera position
  camera.scrollX += (mouseX - newX);
  camera.scrollY += (mouseY - newY);
}
```

Remember to call `this.zoomAroundCursor(this.currentZoom)` when applying zoom changes.
</info added on 2025-04-24T15:22:45.000Z>
</info added on 2025-04-23T20:38:45.479Z>

<info added on 2025-04-23T20:45:43.704Z>
## Implementation Notes and Fixes

When implementing the ZoomController, I encountered and resolved these issues:

1. **Canvas Focus Detection Issue**: The `document.activeElement` check was unreliable as the canvas element doesn't automatically receive focus even with proper tabindex. Modified the approach to use:

```typescript
private isCanvasHovered(): boolean {
  const pointer = this.scene.input.activePointer;
  const canvas = this.scene.game.canvas;
  const rect = canvas.getBoundingClientRect();
  
  return pointer.x >= 0 && pointer.y >= 0 && 
         pointer.x <= canvas.width && pointer.y <= canvas.height;
}
```

2. **Event Propagation**: Added passive event option to improve scrolling performance:

```typescript
canvas.addEventListener('wheel', this.handleWheelEvent.bind(this), { passive: false });
```

3. **Memory Management**: Implemented proper event cleanup with a stored reference to the bound handler:

```typescript
private boundWheelHandler: (e: WheelEvent) => void;

constructor(scene: Phaser.Scene) {
  this.scene = scene;
  this.boundWheelHandler = this.handleWheelEvent.bind(this);
  this.init();
}

public destroy(): void {
  this.scene.game.canvas.removeEventListener('wheel', this.boundWheelHandler);
}
```

4. **Testing Results**: Verified zoom functionality works correctly across different browsers (Chrome, Firefox, Safari) with consistent behavior.
</info added on 2025-04-23T20:45:43.704Z>

## 2. Implement Smooth Zoom Transitions with Interpolation [done]
### Dependencies: 11.1
### Description: Add smooth interpolation between zoom levels to create a fluid zooming experience rather than abrupt changes.
### Details:
1. Implement a target zoom level variable separate from the current zoom level.
2. Create an update method that runs each frame to gradually adjust current zoom toward target zoom.
3. Implement a lerp (linear interpolation) function: currentZoom = currentZoom + (targetZoom - currentZoom) * smoothFactor.
4. Add a configurable smoothFactor parameter (suggested default: 0.1-0.2).
5. Ensure the interpolation stops when the difference becomes negligible (to prevent floating-point issues).
6. Test the smoothness by rapidly scrolling and observing the transition.
7. Optimize the update method to limit calculations when no zoom change is occurring.
8. Add a direct zoom method that bypasses interpolation for situations requiring immediate zoom changes.

<info added on 2025-04-23T20:52:56.155Z>
## Implementation Plan for Smooth Zoom

Here's the plan to implement smooth zooming in `ZoomController.ts` and integrate it with `MainScene.ts`:

**1. `ZoomController.ts` Modifications:**

   - **Add Properties:**
     ```typescript
     private targetZoom: number = 1.0; // Target zoom level for interpolation
     private readonly smoothFactor: number = 0.1; // Interpolation speed factor
     private readonly epsilon: number = 0.001; // Threshold to stop interpolation
     private boundWheelHandler: (e: WheelEvent) => void; // For correct listener removal
     ```
   - **Modify `constructor`:**
     - Initialize `this.targetZoom = this.currentZoom;`.
     - Store the bound event handler: `this.boundWheelHandler = this.handleWheelEvent.bind(this);`.
   - **Modify `init`:**
     - Use `this.boundWheelHandler` when adding the event listener.
   - **Modify `handleWheelEvent`:**
     - Instead of setting `this.currentZoom`, calculate the new target and set `this.targetZoom`:
       ```typescript
       const newTargetZoom = this.currentZoom + zoomDirection * this.zoomStep; // Use currentZoom here for calc
       this.targetZoom = Phaser.Math.Clamp(newTargetZoom, this.minZoom, this.maxZoom);
       // Remove console.log and camera application from here
       ```
   - **Add `update(delta: number)` Method:**
     ```typescript
     public update(delta: number): void {
       // Adjust smooth factor based on delta time for frame rate independence
       // Assuming 60 FPS (16.666ms per frame) as the baseline
       const adjustedSmoothFactor = this.smoothFactor * (delta / 16.666);

       // Check if current zoom is already close enough to the target
       if (Math.abs(this.currentZoom - this.targetZoom) < this.epsilon) {
         // Snap to target if very close to prevent floating point issues
         if (this.currentZoom !== this.targetZoom) {
            this.currentZoom = this.targetZoom;
            this.scene.cameras.main.setZoom(this.currentZoom);
            // console.log(`Zoom snapped to target: ${this.currentZoom.toFixed(3)}`); // Optional debug
         }
         return; // No need to interpolate further
       }

       // Interpolate current zoom towards the target zoom
       this.currentZoom = Phaser.Math.Linear(
         this.currentZoom,
         this.targetZoom,
         adjustedSmoothFactor
       );

       // Apply the interpolated zoom to the camera
       this.scene.cameras.main.setZoom(this.currentZoom);
       // console.log(`Zoom interpolating: Current=${this.currentZoom.toFixed(3)}, Target=${this.targetZoom.toFixed(3)}`); // Optional debug
     }
     ```
   - **Modify `setZoomLevel`:**
     - Set `this.targetZoom` instead of `this.currentZoom`.
     - Remove the `console.log`.
     ```typescript
     public setZoomLevel(level: number): void {
       this.targetZoom = Phaser.Math.Clamp(level, this.minZoom, this.maxZoom);
     }
     ```
   - **Add `setZoomLevelImmediate(level: number)`:**
     ```typescript
     public setZoomLevelImmediate(level: number): void {
       this.currentZoom = Phaser.Math.Clamp(level, this.minZoom, this.maxZoom);
       this.targetZoom = this.currentZoom; // Sync target
       this.scene.cameras.main.setZoom(this.currentZoom); // Apply immediately
       console.log("Zoom set immediately to:", this.currentZoom.toFixed(2));
     }
     ```
   - **Modify `destroy`:**
     - Use `this.boundWheelHandler` to remove the listener.

**2. `MainScene.ts` Modifications:**

   - **Modify `update(time: number, delta: number)`:**
     - Add the call to the zoom controller's update method:
       ```typescript
       if (this.zoomController) {
         this.zoomController.update(delta);
       }
       ```
</info added on 2025-04-23T20:52:56.155Z>

## 4. Implement Zoom Speed Configuration and Keyboard Fallback Controls [pending]
### Dependencies: 11.2
### Description: Add customizable zoom speed settings and implement alternative zoom controls for users without mouse wheels.
### Details:
1. Add a zoomSpeed configuration parameter to control sensitivity (pixels per scroll unit).
2. Implement a method to change zoom speed at runtime and save preference.
3. Add keyboard shortcut handlers for zooming (e.g., '+' and '-' keys or 'Ctrl+Up/Down').
4. Ensure keyboard zooming uses the same smooth transition logic as mouse wheel zooming.
5. For keyboard zooming, use the screen center as the zoom focus point instead of cursor position.
6. Create a simple API to allow zooming programmatically from other game systems.
7. Test both mouse wheel and keyboard controls, ensuring consistent behavior.
8. Add configuration options to invert zoom direction for both mouse and keyboard if desired.

## 5. Add Visual Zoom Indicator and Performance Optimization [pending]
### Dependencies: 11.1, 11.2, 11.4
### Description: Implement a visual indicator showing the current zoom level and optimize the zoom system for performance.
### Details:
1. Create a simple UI element showing current zoom percentage (e.g., '100%', '150%', etc.).
2. Make the indicator appear briefly when zoom changes and fade out after inactivity.
3. Position the indicator in a non-intrusive corner of the screen.
4. Implement throttling for wheel events to prevent excessive calculations (e.g., limit to one zoom adjustment per 50ms).
5. Add a small buffer zone around map edges to prevent zooming when it would push view beyond boundaries.
6. Optimize the update loop to skip calculations when zoom is not changing.
7. Add an option to disable the zoom feature entirely for performance-critical situations.
8. Test the system under various performance conditions to ensure smooth operation.
9. Implement proper cleanup methods to remove event listeners when the controller is destroyed.

