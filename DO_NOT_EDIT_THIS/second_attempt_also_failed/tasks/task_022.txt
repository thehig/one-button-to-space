# Task ID: 22
# Title: Implement EngineManager to Centralize Client Manager Lifecycle
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create an EngineManager class that will be responsible for initializing, updating, and shutting down all client-side managers (Input, Network, UI, Game) in a coordinated way.
# Details:
The EngineManager should be designed as a central coordinator for all client-side managers with the following functionality:

1. **Singleton Pattern**: Implement as a singleton or use dependency injection to ensure there's only one instance managing the lifecycle.

2. **Manager Registration**: Create methods to register and unregister managers (InputManager, NetworkManager, UIManager, GameManager, etc.).

3. **Lifecycle Methods**:
   - `Initialize()`: Initialize all managers in the correct order (e.g., Input before UI, Network before Game)
   - `Update(deltaTime)`: Call update methods on all managers in the appropriate order
   - `Shutdown()`: Properly shut down all managers in reverse initialization order

4. **Reference Management**: Provide a clean API for managers to access each other without creating circular dependencies:
   - Use a service locator pattern or direct reference provision
   - Ensure type safety when retrieving manager references

5. **Error Handling**: Implement robust error handling for cases where managers fail to initialize or update

6. **Performance Monitoring**: Add optional performance tracking to measure time spent in each manager's update cycle

Refactor existing manager classes to work with this new architecture, removing any direct references between managers and instead routing them through the EngineManager.

# Test Strategy:
1. **Unit Tests**:
   - Test initialization order is correct by creating mock managers with counters
   - Verify shutdown sequence works in reverse order
   - Test error cases where a manager fails to initialize
   - Ensure manager references can be correctly retrieved

2. **Integration Tests**:
   - Create a test scene that initializes the full engine stack
   - Verify all managers are properly initialized and can communicate
   - Test the complete lifecycle from startup to shutdown
   - Simulate crashes in individual managers to verify error handling

3. **Performance Tests**:
   - Measure initialization time before and after refactoring
   - Compare update cycle performance with the new architecture
   - Test with varying numbers of registered managers to ensure scalability

4. **Regression Testing**:
   - Run existing game scenarios to ensure the refactoring doesn't break current functionality
   - Verify all manager interactions continue to work as expected through the new EngineManager
