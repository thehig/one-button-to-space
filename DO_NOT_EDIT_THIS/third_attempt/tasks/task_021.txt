# Task ID: 21
# Title: Create GameEventLog React Component for Event Display
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Develop a new React component that displays events from the CommunicationManager through a React Context Provider, showing events chronologically in a filterable list format.
# Details:
Create a new React component named `GameEventLog` in the `packages/client/src/components` directory that works with the CommunicationManager system. The implementation should:

1. Create a CommunicationManager class responsible for:
   - Capturing events from multiple sources including:
     - The Phaser game's `Phaser.Events.EventEmitter` instance
     - Individual game scene event emitters
     - Network event emitters
     - Any other relevant event emitters in the system
   - Tagging events by their source (e.g., "Game", "Scene", "Network")
   - Maintaining an efficient, potentially rolling, chronological log of events to handle high event volume
   - Providing this data to React components via a React Context Provider
   - Serving as the central hub for all Phaser-to-React data transfer

2. Implement a React Context Provider that:
   - Wraps the CommunicationManager functionality
   - Exposes the event log data to React components
   - Provides methods for filtering and clearing the log

3. Create the GameEventLog component that:
   - Consumes the event data from the React Context Provider
   - Maintains no internal event state (relies on the Context Provider)
   - Implements UI controls for filtering events by:
     - Source emitter (e.g., show only network events)
     - Event name/type
     - Event data/value
   - Renders the events as a scrollable list showing:
     - Event timestamp
     - Source tag
     - Event name/type
     - Relevant event data in a readable format
   - Includes a clear button to reset the event log through the Context Provider
   - Uses basic styling to make the log visually distinct

4. Ensure the CommunicationManager:
   - Employs a clear architectural pattern (e.g., Observer, Pub/Sub) for decoupling event sources and consumers
   - Subscribes to all emitters when initialized and unsubscribes when destroyed
   - Implements a maximum number of events to store (e.g., 50) to prevent performance issues
   - Provides efficient filtering capabilities
   - Prioritizes clarity, testability, and maintainability in the implementation

5. All Phaser-to-React communication should flow through the CommunicationManager, not directly to the React components.

The component should be flexible enough to handle different event types without errors and should display the source tags provided by the CommunicationManager.

# Test Strategy:
Testing should verify both the component's rendering and the CommunicationManager's event handling functionality:

1. **Unit Tests**:
   - Test that the CommunicationManager correctly captures events from different sources
   - Verify the CommunicationManager properly tags events by source
   - Test that the React Context Provider correctly exposes the event data
   - Verify the GameEventLog component renders without errors
   - Confirm the CommunicationManager unsubscribes from all emitters when destroyed to prevent memory leaks
   - Test that the filtering system correctly filters events by source, name, and value
   - Verify the clear button functionality works through the Context Provider
   - Test the architectural pattern implementation (Observer/Pub-Sub) for proper decoupling

2. **Integration Tests**:
   - Mock multiple event emitters (game, scene, network) and dispatch various event types
   - Verify events from all sources are captured by the CommunicationManager and displayed in chronological order
   - Check that the CommunicationManager correctly formats different event data types
   - Test that source tagging works correctly for all emitter types
   - Verify filter combinations work as expected (e.g., source + event name)
   - Test the complete flow from Phaser events through the CommunicationManager to the React component
   - Verify the rolling log mechanism handles high event volumes efficiently

3. **Manual Testing**:
   - Integrate the component into a game view and verify real events appear from all sources
   - Test with high-frequency events to ensure performance remains acceptable
   - Verify the component handles edge cases like empty events or unusual data formats
   - Check that the component is visually consistent with the rest of the UI
   - Test all filtering options with real game data
   - Confirm the automatic source tagging works correctly for all event types
   - Verify that all Phaser-to-React communication flows through the CommunicationManager
