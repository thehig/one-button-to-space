{
  "tasks": [
    {
      "id": 1,
      "title": "Initialize pnpm Monorepo Structure",
      "description": "Set up the initial monorepo structure with client, server, and shared packages using pnpm workspaces.",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "Create a new directory for the project. Initialize pnpm workspace by creating a pnpm-workspace.yaml file in the root with packages defined as ['client', 'server', 'shared']. Set up package.json in the root with workspace configuration. Create subdirectories for each package with their own package.json files. Configure root-level scripts for building and running all packages.",
      "testStrategy": "Verify that pnpm workspaces are correctly configured by running 'pnpm install' and confirming dependencies are hoisted appropriately. Ensure packages can reference each other using the workspace protocol."
    },
    {
      "id": 2,
      "title": "Configure TypeScript for All Packages",
      "description": "Set up TypeScript configuration for client, server, and shared packages with strict type checking.",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Create a base tsconfig.json in the root directory with strict type checking enabled. Create extended tsconfig.json files in each package directory that reference the base config and add package-specific settings. For client, configure for React/Vite. For server, configure for Node.js. For shared, configure for cross-environment compatibility. Install TypeScript and related type definitions as dev dependencies.",
      "testStrategy": "Run 'tsc --noEmit' in each package to verify TypeScript configuration is valid. Create simple test files in each package to ensure compilation works correctly."
    },
    {
      "id": 3,
      "title": "Set Up Client Package with Vite and React",
      "description": "Initialize the client package with Vite, React, and TypeScript support.",
      "status": "done",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "In the client directory, initialize a new Vite project with React and TypeScript template using 'pnpm create vite . --template react-ts'. Configure vite.config.ts for development and production builds. Set up basic React component structure. Install necessary dependencies including React, React DOM, and Vite. Create a simple App component and entry point to verify setup.",
      "testStrategy": "Run 'pnpm dev' in the client package to verify the Vite development server starts correctly. Confirm the React application renders in the browser without errors."
    },
    {
      "id": 4,
      "title": "Set Up Server Package with Node.js, Express, and Colyseus",
      "description": "Initialize the server package with Node.js, Express, and Colyseus for WebSocket communication.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "In the server directory, initialize a new Node.js project. Install Express, Colyseus, and related dependencies. Create a basic server.ts file that sets up an Express application and integrates Colyseus for WebSocket handling. Configure scripts for development (with nodemon) and production builds. Set up a basic HTTP endpoint for health checks.",
      "testStrategy": "Run the server and verify it starts without errors. Test the health check endpoint with a simple HTTP request. Verify Colyseus is properly initialized by checking server logs."
    },
    {
      "id": 5,
      "title": "Implement Shared Physics Module with Matter.js",
      "description": "Create the core physics simulation module in the shared package using Matter.js.",
      "status": "done",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "In the shared package, install Matter.js and its TypeScript definitions. Create a PhysicsEngine class that encapsulates Matter.js functionality. Implement methods for creating and configuring the physics world, adding/removing bodies, and stepping the simulation with a fixed timestep. Define physics constants (gravity, collision categories, etc.) in a separate constants file. Ensure the implementation is deterministic and can be used identically on both client and server.",
      "testStrategy": "Create unit tests for the physics module to verify deterministic behavior. Run the same simulation with identical inputs on different platforms and compare the results to ensure consistency."
    },
    {
      "id": 6,
      "title": "Integrate Phaser with React in Client",
      "description": "Set up Phaser within the React application and create the basic scene structure.",
      "status": "done",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "Install Phaser in the client package. Create a PhaserGame component in React that initializes and manages the Phaser game instance. Set up basic scene classes (BootScene, MainMenuScene, GameScene) following Phaser's lifecycle methods. Create a container div in the React component to mount the Phaser canvas. Implement proper cleanup in the React component's useEffect hook to prevent memory leaks during component unmounting.",
      "testStrategy": "Verify Phaser initializes correctly within the React application. Check that scenes load properly and the game canvas renders. Test component mounting/unmounting to ensure proper cleanup."
    },
    {
      "id": 7,
      "title": "Implement Client-Side Manager Architecture",
      "description": "Create the core manager classes for the client-side game architecture.",
      "status": "done",
      "dependencies": [
        6
      ],
      "priority": "high",
      "details": "Implement the manager classes as specified in the PRD: PhysicsManager (integrating with shared physics), InputManager, NetworkManager, EntityManager, CameraManager, UIManager, and AudioManager. Each manager should have clear lifecycle methods (init, create/start, update, shutdown/destroy). Set up dependency injection between managers. Implement an event bus system using Phaser's event emitters for communication between managers. Ensure proper cleanup in shutdown/destroy methods.",
      "testStrategy": "Create test scenarios that exercise each manager's functionality. Verify managers initialize, update, and clean up correctly. Test event communication between managers. Verify Hot Module Replacement works without memory leaks."
    },
    {
      "id": 8,
      "title": "Implement PhysicsManager Integration with Shared Module",
      "description": "Connect the client-side PhysicsManager with the shared physics module.",
      "status": "done",
      "dependencies": [
        5,
        7
      ],
      "priority": "high",
      "details": "In the PhysicsManager, import and instantiate the physics engine from the shared package. Implement methods to create, update, and render physics bodies. Create a bridge between Phaser's update loop and the fixed timestep physics simulation. Add debug rendering capabilities for physics bodies. Ensure proper synchronization between physics bodies and their visual representations.",
      "testStrategy": "Test physics simulation with various scenarios (gravity, collisions, etc.). Verify visual representations match physics body positions and rotations. Check that the fixed timestep implementation maintains consistent simulation regardless of frame rate."
    },
    {
      "id": 9,
      "title": "Implement Basic Colyseus Room on Server",
      "description": "Create the server-side GameRoom using Colyseus for multiplayer functionality.",
      "status": "pending",
      "dependencies": [
        4,
        5
      ],
      "priority": "high",
      "details": "In the server package, create a GameRoom class extending Colyseus.Room. Implement onCreate, onJoin, onLeave, and onDispose lifecycle methods. Integrate the shared physics module for server-side simulation. Define the initial state schema using @colyseus/schema for state synchronization. Implement basic player management (adding/removing players). Set up a fixed update loop for physics simulation on the server.",
      "testStrategy": "Test room creation, joining, and leaving with mock clients. Verify the physics simulation runs correctly on the server. Check that the state schema is properly defined and synchronized."
    },
    {
      "id": 10,
      "title": "Implement Client-Server Network Communication",
      "description": "Set up communication between client NetworkManager and server GameRoom.",
      "status": "pending",
      "dependencies": [
        7,
        9
      ],
      "priority": "high",
      "details": "In the NetworkManager, implement Colyseus client connection and room joining. Create message types in the shared package for client-server communication. Implement sending player inputs from client to server. Set up receiving and processing state updates from server to client. Add connection status handling and reconnection logic.",
      "testStrategy": "Test client-server connection establishment. Verify input messages are correctly sent from client to server. Check that state updates are received and processed by the client. Test reconnection scenarios."
    },
    {
      "id": 11,
      "title": "Implement Rocket Physics and Control",
      "description": "Create the core rocket physics and player control mechanics.",
      "status": "pending",
      "dependencies": [
        8
      ],
      "priority": "medium",
      "details": "In the shared package, define rocket physics properties (mass, thrust force, etc.). Implement rocket body creation in the physics engine. In the client, create a PlayerRocketController that translates input events to physics forces. Implement thrust and orientation control based on input (touch/click for thrust, device tilt or keyboard for orientation). Add visual feedback for thrust activation.",
      "testStrategy": "Test rocket movement with different input combinations. Verify physics behavior matches expected rocket dynamics. Check that visual feedback correctly reflects the physics state."
    },
    {
      "id": 12,
      "title": "Implement Advanced Physics Simulation",
      "description": "Enhance the shared physics module with gravity, atmospheric effects, and collision handling.",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "medium",
      "details": "Extend the physics engine to support variable gravity based on proximity to celestial bodies. Implement atmospheric density and drag effects. Add collision detection and handling, including special logic for landing detection based on velocity and angle. Implement collision categories and groups for different types of objects (rockets, debris, planets, etc.).",
      "testStrategy": "Create test scenarios for each physics feature (gravity, atmosphere, collisions). Verify behavior matches expected physics. Test edge cases like high-velocity impacts and extreme distances from gravity sources."
    },
    {
      "id": 13,
      "title": "Implement Client-Side Prediction and Reconciliation",
      "description": "Add client-side prediction and server reconciliation for smooth multiplayer experience.",
      "status": "pending",
      "dependencies": [
        10,
        11
      ],
      "priority": "medium",
      "details": "In the NetworkManager, implement input sequence numbering and buffering. Add client-side prediction by applying inputs locally before server confirmation. Implement server reconciliation by comparing server state with predicted state and correcting discrepancies. Add interpolation for remote player entities to smooth movement between state updates. Implement a replay system for re-applying inputs after reconciliation.",
      "testStrategy": "Test with artificial network latency to verify prediction and reconciliation. Check visual smoothness of local and remote player movement. Verify recovery from prediction errors."
    },
    {
      "id": 14,
      "title": "Implement Ship Types and Properties",
      "description": "Create different ship types with varying physics properties and constraints.",
      "status": "pending",
      "dependencies": [
        11
      ],
      "priority": "medium",
      "details": "In the shared package, define data structures for different ship types (Tourist, Cargo). Implement varying physics properties (mass, engine force, rotation speed) for each type. Create factory methods for instantiating different ship types in the physics simulation. Add visual representations for each ship type in the client.",
      "testStrategy": "Test each ship type with identical inputs to verify different handling characteristics. Check that physics properties correctly affect movement and control. Verify visual representations match the ship type."
    },
    {
      "id": 15,
      "title": "Implement Cargo System",
      "description": "Create mechanics for picking up, attaching, and delivering cargo items.",
      "status": "pending",
      "dependencies": [
        12,
        14
      ],
      "priority": "medium",
      "details": "Define cargo item physics properties in the shared package. Implement collision detection for cargo pickup. Create attachment mechanics that affect the physics of the carrying ship. Implement cargo delivery detection based on location and velocity. Add visual feedback for cargo attachment and delivery.",
      "testStrategy": "Test cargo pickup with different approach vectors and speeds. Verify physics changes when cargo is attached. Test cargo delivery under various conditions. Check that multiplayer cargo handling works correctly."
    },
    {
      "id": 16,
      "title": "Implement Multiplayer Collision and Debris System",
      "description": "Create the system for player-vs-player collisions and persistent debris generation.",
      "status": "pending",
      "dependencies": [
        9,
        12
      ],
      "priority": "medium",
      "details": "In the server GameRoom, implement collision detection between player rockets. On collision, destroy both rockets and generate debris physics bodies. Add debris to the state schema for synchronization. In the client, implement visual effects for explosions and debris rendering. Ensure debris persists in the simulation and affects other players.",
      "testStrategy": "Test player-vs-player collisions with different velocities and angles. Verify debris generation and persistence. Check that debris correctly affects other players through collisions. Test with multiple simultaneous collisions."
    },
    {
      "id": 17,
      "title": "Implement Basic Mission System",
      "description": "Create a framework for defining and tracking mission objectives.",
      "status": "pending",
      "dependencies": [
        15
      ],
      "priority": "low",
      "details": "Define a mission system architecture with objectives, triggers, and success/fail conditions. Implement initial mission types: Tourism (point A to B with comfort constraints) and Cargo (delivery with time/fuel limits). Create mission tracking and status updating. Add mission selection and assignment in the game flow.",
      "testStrategy": "Test mission assignment and tracking. Verify success and failure conditions trigger correctly. Test mission-specific constraints like G-force limits and time restrictions."
    },
    {
      "id": 18,
      "title": "Implement Visual Effects and Environment",
      "description": "Create visual effects for thrusters, explosions, and the space environment.",
      "status": "pending",
      "dependencies": [
        6
      ],
      "priority": "low",
      "details": "Implement animated thruster effects tied to input state. Create explosion animations for collisions. Implement a procedural star field background using a deterministic seeded approach. Add visual indicators for gravity wells and atmospheric boundaries. Implement particle effects for atmospheric entry.",
      "testStrategy": "Verify visual effects trigger at appropriate times. Check that animations play correctly and clean up properly. Test procedural generation consistency across different clients."
    },
    {
      "id": 19,
      "title": "Implement React UI Components and HUD",
      "description": "Create user interface components for game information and controls.",
      "status": "pending",
      "dependencies": [
        3,
        7
      ],
      "priority": "low",
      "details": "Design and implement React components for velocity, altitude, fuel, and mission info display. Create a main menu component with options for map/mode selection and multiplayer connection. Implement a debug overlay with physics controls and information. Set up communication between React components and Phaser game state via the event bus.",
      "testStrategy": "Test UI component rendering and updates with different game states. Verify user interactions with UI elements work correctly. Check that UI components receive and display accurate game information."
    },
    {
      "id": 20,
      "title": "Implement Camera Controls and Game Polish",
      "description": "Finalize camera behavior and add polish to the game experience.",
      "status": "pending",
      "dependencies": [
        7,
        18
      ],
      "priority": "low",
      "details": "Implement camera following and zooming behavior in the CameraManager. Add smooth transitions between different camera states. Implement depth sorting for game objects to ensure correct rendering order. Add visual and audio feedback for important game events. Optimize performance for different device capabilities.",
      "testStrategy": "Test camera behavior with different game scenarios. Verify smooth transitions and appropriate zoom levels. Check rendering order in complex scenes with many objects. Test performance on various devices."
    },
    {
      "id": 21,
      "title": "Create GameEventLog React Component for Event Display",
      "description": "Develop a new React component that displays events from the CommunicationManager through a React Context Provider, showing events chronologically in a filterable list format.",
      "details": "Create a new React component named `GameEventLog` in the `packages/client/src/components` directory that works with the CommunicationManager system. The implementation should:\n\n1. Create a CommunicationManager class responsible for:\n   - Capturing events from multiple sources including:\n     - The Phaser game's `Phaser.Events.EventEmitter` instance\n     - Individual game scene event emitters\n     - Network event emitters\n     - Any other relevant event emitters in the system\n   - Tagging events by their source (e.g., \"Game\", \"Scene\", \"Network\")\n   - Maintaining an efficient, potentially rolling, chronological log of events to handle high event volume\n   - Providing this data to React components via a React Context Provider\n   - Serving as the central hub for all Phaser-to-React data transfer\n\n2. Implement a React Context Provider that:\n   - Wraps the CommunicationManager functionality\n   - Exposes the event log data to React components\n   - Provides methods for filtering and clearing the log\n\n3. Create the GameEventLog component that:\n   - Consumes the event data from the React Context Provider\n   - Maintains no internal event state (relies on the Context Provider)\n   - Implements UI controls for filtering events by:\n     - Source emitter (e.g., show only network events)\n     - Event name/type\n     - Event data/value\n   - Renders the events as a scrollable list showing:\n     - Event timestamp\n     - Source tag\n     - Event name/type\n     - Relevant event data in a readable format\n   - Includes a clear button to reset the event log through the Context Provider\n   - Uses basic styling to make the log visually distinct\n\n4. Ensure the CommunicationManager:\n   - Employs a clear architectural pattern (e.g., Observer, Pub/Sub) for decoupling event sources and consumers\n   - Subscribes to all emitters when initialized and unsubscribes when destroyed\n   - Implements a maximum number of events to store (e.g., 50) to prevent performance issues\n   - Provides efficient filtering capabilities\n   - Prioritizes clarity, testability, and maintainability in the implementation\n\n5. All Phaser-to-React communication should flow through the CommunicationManager, not directly to the React components.\n\nThe component should be flexible enough to handle different event types without errors and should display the source tags provided by the CommunicationManager.",
      "testStrategy": "Testing should verify both the component's rendering and the CommunicationManager's event handling functionality:\n\n1. **Unit Tests**:\n   - Test that the CommunicationManager correctly captures events from different sources\n   - Verify the CommunicationManager properly tags events by source\n   - Test that the React Context Provider correctly exposes the event data\n   - Verify the GameEventLog component renders without errors\n   - Confirm the CommunicationManager unsubscribes from all emitters when destroyed to prevent memory leaks\n   - Test that the filtering system correctly filters events by source, name, and value\n   - Verify the clear button functionality works through the Context Provider\n   - Test the architectural pattern implementation (Observer/Pub-Sub) for proper decoupling\n\n2. **Integration Tests**:\n   - Mock multiple event emitters (game, scene, network) and dispatch various event types\n   - Verify events from all sources are captured by the CommunicationManager and displayed in chronological order\n   - Check that the CommunicationManager correctly formats different event data types\n   - Test that source tagging works correctly for all emitter types\n   - Verify filter combinations work as expected (e.g., source + event name)\n   - Test the complete flow from Phaser events through the CommunicationManager to the React component\n   - Verify the rolling log mechanism handles high event volumes efficiently\n\n3. **Manual Testing**:\n   - Integrate the component into a game view and verify real events appear from all sources\n   - Test with high-frequency events to ensure performance remains acceptable\n   - Verify the component handles edge cases like empty events or unusual data formats\n   - Check that the component is visually consistent with the rest of the UI\n   - Test all filtering options with real game data\n   - Confirm the automatic source tagging works correctly for all event types\n   - Verify that all Phaser-to-React communication flows through the CommunicationManager",
      "status": "in-progress",
      "dependencies": [],
      "priority": "medium"
    },
    {
      "id": 22,
      "title": "Develop Comprehensive Test Suite for logger-ui Package",
      "description": "Create a complete test suite for the logger-ui package that covers hook logic, component rendering, user interactions, and context usage using React Testing Library.",
      "details": "Implement a comprehensive test suite for the logger-ui package following these requirements:\n\n1. **Hook Testing**:\n   - Test all custom hooks in the package (e.g., useLogger, useLoggerContext)\n   - Verify hooks properly manage state and respond to changes\n   - Test error handling and edge cases\n   - **Specific Hook Testing Plan**:\n     - **`useComponentLayout`**:\n       - Verify layout state management (position, size, visibility)\n       - Test initial state, toggle visibility, update position (drag simulation)\n       - Test update size (resize simulation) and boundary checks\n     - **`useEventFiltering`**:\n       - Verify log event filtering logic\n       - Test initial state, text filtering (including case sensitivity)\n       - Test source filtering, level filtering, combined filters\n       - Test filter clearing and input debouncing (if applicable)\n\n2. **Component Testing**:\n   - Test all UI components for proper rendering\n   - Verify components display correct information based on props\n   - Test component lifecycle behaviors\n   - Ensure accessibility standards are met\n   - **Specific Component Testing Plan**:\n     - **`GameEventLog.tsx`**: \n       - Test rendering with prop variations (`startsOpen`, `startsLocked`, `hijackConsoleLogs`, initial layout)\n       - Test context wrapping and initial events\n       - Verify conditional sections (tree/details)\n       - Test visibility/opacity based on state\n     - **`TreeNode.tsx`**: \n       - Test rendering with various node structures\n       - Test `allowedSources` variations (verify checkbox state)\n       - Test `activeSourcesInLog` variations (verify styling)\n       - Verify count displays and disabled state\n\n3. **User Interaction Testing**:\n   - Test all interactive elements (buttons, inputs, etc.)\n   - Verify event handlers are called with correct parameters\n   - Test keyboard navigation and shortcuts\n   - Simulate user actions and verify expected outcomes\n   - **Specific Interaction/Integration Tests (GameEventLog focus)**:\n     - **Event Handling:** \n       - Simulate `new-event` from manager -> verify UI updates\n       - Test `console.log` hijack -> verify context `logEvent` called & UI updates\n       - Test new source event -> verify filter tree updates\n     - **Filtering:** \n       - Test text input -> verify list filters\n       - Test `TreeNode` checkbox clicks -> verify `allowedSources` updates & list filters\n       - Test parent/child checkbox logic\n     - **UI Controls:** \n       - Test clear button -> verify `clearLog` called & UI clears\n       - Test toggle visibility -> verify state change & window visibility\n       - Test lock button -> verify state change & Rnd props toggle\n       - Test toggle tree/details -> verify sections visibility\n     - **Window Management:** \n       - Simulate Rnd drag/resize -> verify layout state updates via hook\n\n4. **Context Testing**:\n   - Test LoggerContext provider and consumer behavior\n   - Verify context values are properly passed to components\n   - Test context updates and their effects on dependent components\n   - **Specific Context Testing Plan**:\n     - Render consumer -> verify received values (`events`, `clearLog`, `logEvent`)\n     - Test provider props (`maxLogSize`, `redirectEventsToConsole`) -> verify manager methods called (mock manager singleton)\n     - Mock manager -> emit `new-event`/`log-cleared` -> verify context `events` state updates\n     - Call context `clearLog` -> verify manager `clearLog` called\n\nUse React Testing Library as the primary testing tool. Organize tests in a structure that mirrors the package's component hierarchy. Mock external dependencies as needed. Aim for at least 80% test coverage.",
      "testStrategy": "The implementation will be verified through the following approach:\n\n1. **Code Review**:\n   - Verify test files exist for all components, hooks, and contexts\n   - Check that tests follow React Testing Library best practices\n   - Ensure tests are well-organized and maintainable\n\n2. **Test Coverage Analysis**:\n   - Run coverage reports to ensure at least 80% code coverage\n   - Identify and address any gaps in test coverage\n   - Verify all critical paths are tested\n\n3. **Test Quality Verification**:\n   - Confirm tests include positive and negative scenarios\n   - Verify edge cases are covered\n   - Check that tests are deterministic (no flaky tests)\n\n4. **Specific Test Cases to Verify**:\n   - Hook initialization and state management\n   - Component rendering with various prop combinations\n   - Error states and boundary conditions\n   - User interactions (clicks, inputs, etc.)\n   - Context provider behavior and consumer updates\n   - Accessibility compliance\n   - **Hook-Specific Test Cases**:\n     - For `useComponentLayout`: Initial state, visibility toggling, position updates, size updates, boundary conditions\n     - For `useEventFiltering`: Filter application, text search, source/level filtering, combined filters, filter reset\n   - **Component-Specific Test Cases**:\n     - For `GameEventLog`: Prop variations, context integration, conditional rendering, state-based visibility\n     - For `TreeNode`: Node structure rendering, source filtering, styling based on active sources\n   - **Interaction-Specific Test Cases**:\n     - Event handling: Manager events to UI updates, console hijacking, source filtering\n     - UI controls: Clear button, visibility toggle, lock button, tree/details toggle\n     - Window management: Drag and resize operations\n\n5. **CI Integration**:\n   - Ensure tests run successfully in the CI pipeline\n   - Verify tests complete in a reasonable time\n\n6. **Testing Tools**:\n   - Use `renderHook` and `act` from React Testing Library for hook testing\n   - Implement appropriate mocks for dependencies\n   - Use mock functions to verify context and manager interactions",
      "status": "in-progress",
      "dependencies": [],
      "priority": "medium",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement CommunicationManager Test Suite",
          "description": "Create a comprehensive test suite for the CommunicationManager singleton class to achieve full coverage of its functionality.",
          "dependencies": [],
          "details": "Implementation steps:\n1. Create CommunicationManager.test.ts file in the appropriate test directory\n2. Test singleton pattern implementation (getInstance returns same instance)\n3. Test logEvent method (verify event addition, max size trimming, and event emission)\n4. Test clearLog method (verify events cleared and clear event emitted)\n5. Test event listener methods (on, off) with various event types\n6. Test configuration methods (setMaxLogSize, setRedirectEventsToConsole)\n7. Test getEventLog method returns correct event array\n8. Use jest.spyOn for emission verification and mock timers if needed\n\nTesting approach:\n- Use isolated unit tests with proper setup/teardown to reset singleton between tests\n- Mock EventEmitter functionality where needed\n- Test edge cases like empty logs, max size boundaries\n- Verify event structure and timestamps\n- Ensure 100% coverage of this critical class\n\n<info added on 2025-05-05T20:48:25.645Z>\n# Implementation Plan for Task 22.1: CommunicationManager Test Suite\n\n**File:** `packages\\logger-ui\\src\\CommunicationManager.test.ts`\n\n**Testing Framework:** Vitest (based on `vitest.config.ts` in the package)\n\n**Setup:**\n1.  Import `CommunicationManager`, `EventLogEntry`, and necessary Vitest functions (`describe`, `it`, `expect`, `beforeEach`, `afterEach`, `vi`).\n2.  Use `beforeEach` and `afterEach` to manage the singleton instance:\n    *   `beforeEach`: Reset Vitest mocks (`vi.resetModules()`), dynamically import `CommunicationManager` to get a fresh module scope, get the instance. Mock `Date.now()` for consistent timestamps. Mock `window` and `window.__console_log_original`.\n    *   `afterEach`: Call `CommunicationManager.getInstance().destroy()` to clean up listeners, explicitly delete the static instance (`delete (CommunicationManager as any).instance;`) to ensure isolation. Restore mocks (`vi.restoreAllMocks()`).\n\n**Test Cases:**\n\n1.  **Singleton Pattern (`getInstance`)**:\n    *   `it('should return the same instance')`: Call `getInstance()` multiple times and assert the returned objects are strictly equal.\n    *   `it('should create a new instance if none exists')`: Verify instance creation on first call.\n\n2.  **`logEvent` Method**:\n    *   `it('should add a log entry with correct structure')`: Call `logEvent`, then `getEventLog`, check array length and the structure/content of the added entry (timestamp, source, eventName, data).\n    *   `it('should emit \"new-event\" with the log entry')`: Spy on `emit`, call `logEvent`, verify `emit` was called with `'new-event'` and the correct entry.\n    *   `it('should handle different data types (object, array, primitive, null)')`: Test `logEvent` with various data types and verify they are stored correctly.\n    *   `it('should trim the log when maxLogSize is exceeded')`: Set `maxLogSize` low, add more events than the limit, verify `getEventLog` returns only the last N entries. Check trimming behavior (should keep *last* N).\n    *   `it('should redirect to original console.log when enabled')`: Set `redirectEventsToConsole(true)`, mock `window.__console_log_original`, spy on it, call `logEvent`, verify the mock was called with correct formatting.\n    *   `it('should not redirect to console when disabled')`: Set `redirectEventsToConsole(false)`, spy on mock `window.__console_log_original`, verify it was NOT called.\n\n3.  **`clearLog` Method**:\n    *   `it('should clear the event log')`: Add events, call `clearLog`, verify `getEventLog` returns an empty array.\n    *   `it('should emit \"log-cleared\" event')`: Spy on `emit`, call `clearLog`, verify `emit` was called with `'log-cleared'`. \n\n4.  **Event Listeners (`on`, `off`, `emit`)**:\n    *   `it('should register and trigger event listeners using \"on\"')`: Register a listener using `on`, `emit` the event, verify the listener callback was executed.\n    *   `it('should remove event listeners using \"off\"')`: Register a listener, remove it using `off`, emit the event, verify the listener was NOT called.\n\n5.  **Configuration (`setMaxLogSize`, `setRedirectEventsToConsole`)**:\n    *   `it('should update maxLogSize')`: Call `setMaxLogSize`, check the internal `_maxLogSize` (or use the getter `maxLogSize`) and verify it trims the log immediately if needed. Test with valid and invalid (negative, zero) inputs, ensuring validation works.\n    *   `it('should log the maxLogSize change')`: Spy on `logEvent`, call `setMaxLogSize`, verify `logEvent` was called with appropriate details.\n    *   `it('should update redirectEventsToConsole flag')`: Call `setRedirectEventsToConsole`, check internal `_redirectEventsToConsole` state.\n    *   `it('should log the redirect change only when value changes')`: Spy on `logEvent`, call `setRedirectEventsToConsole` multiple times (true -> false -> false -> true), verify `logEvent` is called only when the state actually changes.\n\n6.  **`getEventLog` Method**:\n    *   `it('should return a copy of the event log array')`: Get the log, modify the returned array, get the log again, verify the internal log wasn't changed (defensive copy).\n    *   `it('should return the current log entries')`: Add events, call `getEventLog`, verify the contents match expected.\n\n7.  **`destroy` Method**:\n    *   `it('should remove all listeners')`: Add listeners, call `destroy`, emit events, verify listeners are not called. (Check `listenerCount` goes to 0).\n    *   `it('should potentially clean up other resources (if any added later)')` - Placeholder if needed.\n\n**Mocks:**\n*   `vi.spyOn(CommunicationManager.prototype, 'emit')`\n*   `vi.spyOn(console, 'log')` / `window.__console_log_original` (mock implementation)\n*   `vi.useFakeTimers()` and `vi.setSystemTime()` for consistent timestamps in `Date.now()`.\n*   Mock `window` object as needed for console redirection tests.\n</info added on 2025-05-05T20:48:25.645Z>",
          "status": "done",
          "parentTaskId": 22
        },
        {
          "id": 2,
          "title": "Create GameEventLogConfig Test Suite",
          "description": "Develop tests for the GameEventLogConfig module focusing on tree manipulation functions and configuration state management.",
          "dependencies": [],
          "details": "Implementation steps:\n1. Create GameEventLogConfig.test.ts file if not exists or extend existing file\n2. Test buildTreeFromConfig function with various input configurations\n   - Test with empty config\n   - Test with single level sources\n   - Test with nested source hierarchies\n   - Test with custom labels and IDs\n3. Test findNodeById function\n   - Test finding nodes at different levels\n   - Test with non-existent IDs\n   - Test with empty trees\n4. Test updateNodeState function\n   - Test enabling/disabling nodes\n   - Test parent/child relationship updates\n   - Test state propagation through the tree\n5. Test getAllSourceIds function\n   - Test with various tree structures\n   - Verify all IDs are collected correctly\n\nTesting approach:\n- Create sample tree configurations for testing\n- Use snapshot testing for complex tree structures\n- Test edge cases and boundary conditions\n- Verify tree integrity after operations\n- Aim for 100% coverage of this module",
          "status": "done",
          "parentTaskId": 22
        },
        {
          "id": 3,
          "title": "Implement Utility Functions Test Suite",
          "description": "Create tests for utility functions in utils.ts to ensure proper behavior of helper functions used throughout the package.",
          "dependencies": [],
          "details": "Implementation steps:\n1. Create or extend utils.test.ts file\n2. Test getContrastColor function\n   - Test with various background colors (light, dark, edge cases)\n   - Verify correct contrast color returned (black or white)\n   - Test with invalid inputs if applicable\n3. Test formatTimestamp function\n   - Test with various date inputs\n   - Verify correct formatting with expected output\n   - Test with edge cases (null, invalid dates)\n4. Test debounce function\n   - Use jest.useFakeTimers() to control timing\n   - Test function called after delay\n   - Test function not called before delay\n   - Test multiple rapid calls only execute once\n   - Test with different delay values\n   - Test cancellation functionality if implemented\n\nTesting approach:\n- Use precise assertions for expected outputs\n- For debounce, use jest timer mocks to avoid actual waiting\n- Test edge cases thoroughly\n- Ensure timing-sensitive tests are reliable\n- Aim for 100% coverage of utility functions",
          "status": "done",
          "parentTaskId": 22
        },
        {
          "id": 4,
          "title": "Enhance GameEventLog Component Test Coverage",
          "description": "Improve test coverage for the GameEventLog component by testing additional UI states, event handlers, and rendering edge cases.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Implementation steps:\n1. Extend existing GameEventLog.test.tsx file\n2. Test Rnd event handlers\n   - Test handleDragStop with various position values\n   - Test handleResizeStop with different size values\n   - Verify layout state updates correctly\n3. Test UI state combinations not yet covered\n   - Test with empty event logs\n   - Test with very large event logs\n   - Test with various filter combinations active\n4. Test data panel and tree rendering edge cases\n   - Test with no sources configured\n   - Test with all sources disabled\n   - Test with mixed enabled/disabled sources\n5. Test console log hijacking functionality\n   - Verify console.log calls are captured when enabled\n   - Verify original console.log behavior when disabled\n6. Test window visibility and opacity states\n   - Test transitions between visible/hidden states\n   - Test locked/unlocked state effects on Rnd component\n\nTesting approach:\n- Use React Testing Library for component rendering and interaction\n- Mock CommunicationManager where needed\n- Use screen queries and user-event for interactions\n- Verify DOM structure and state changes\n- Focus on uncovered code paths identified in coverage report\n- Use test coverage reports to identify specific uncovered lines\n\n<info added on 2025-05-05T22:14:06.883Z>\nHere's additional information to enhance the subtask:\n\n```\nTest implementation details:\n\nFor Rnd event handlers:\n- Mock the Rnd component's onDragStop/onResizeStop callbacks with jest.fn()\n- Use fireEvent.mouseDown/mouseMove/mouseUp to simulate drag operations\n- Assert position state updates with expect(setState).toHaveBeenCalledWith({x: expect.any(Number), y: expect.any(Number)})\n- Test boundary conditions (e.g., dragging to screen edges)\n\nFor large event logs testing:\n- Create test fixtures with 1000+ log entries to test performance\n- Verify virtualization works correctly by checking only visible items are rendered\n- Test scroll behavior using scrollTo and checking visible content changes\n\nFor filter combinations:\n- Create test matrix covering all filter permutations (log level × source × search term)\n- Test regex search functionality with special characters and edge patterns\n- Verify filter state persistence between component re-renders\n\nFor console hijacking:\n- Use jest.spyOn(console, 'log') to verify interception\n- Test error handling when console methods throw exceptions\n- Verify correct message formatting and metadata capture\n\nMock implementation examples:\n```jsx\n// Mock for testing Rnd callbacks\nconst mockSetPosition = jest.fn();\nReact.useState = jest.fn().mockReturnValue([{x: 0, y: 0}, mockSetPosition]);\n\n// For testing console hijacking\nconst originalConsoleLog = console.log;\nconst mockLogCapture = jest.fn();\nbeforeEach(() => {\n  console.log = jest.fn();\n});\nafterEach(() => {\n  console.log = originalConsoleLog;\n});\n```\n\nSpecific test scenarios to implement:\n- Test keyboard shortcuts for showing/hiding the component\n- Test persistence of position/size between component unmount/remount\n- Test auto-scrolling behavior when new logs arrive\n- Test search highlighting in log entries\n- Test proper cleanup of event listeners on unmount\n</info added on 2025-05-05T22:14:06.883Z>",
          "status": "in-progress",
          "parentTaskId": 22
        },
        {
          "id": 5,
          "title": "Fix Linting Errors and Improve useEventFiltering Coverage",
          "description": "Address linting errors in test files and improve test coverage for useEventFiltering hook to reach coverage targets.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Implementation steps:\n1. Fix linting errors in CommunicationContext.test.tsx\n   - Address the two @typescript-eslint/no-explicit-any errors on lines 183 and 195\n   - Replace 'as any' with proper type definitions for mockImplementation\n   - Create proper type definitions for the spy functions if needed\n   - Ensure tests still pass after fixing lint errors\n2. Enhance useEventFiltering.test.tsx\n   - Add tests for uncovered lines 55-56 (likely related to specific filter conditions)\n   - Add tests for uncovered lines 62-72 (likely effect branches or specific filter/count logic)\n   - Test edge cases like empty event lists with filters applied\n   - Test filter combinations not yet covered\n3. Run final coverage report\n   - Verify overall coverage exceeds 80%\n   - Address any remaining small gaps\n4. Run linting on all test files\n   - Fix any additional linting issues discovered\n\nTesting approach:\n- Use React Testing Library's renderHook for testing hooks\n- Create comprehensive test fixtures with various event types\n- Test all filter combinations thoroughly\n- Verify filter state and filtered results match expectations\n- Use coverage reports to target specific uncovered lines\n- Ensure all tests pass linting checks",
          "status": "pending",
          "parentTaskId": 22
        }
      ]
    }
  ],
  "metadata": {
    "projectName": "One Button to Space Implementation",
    "totalTasks": 20,
    "sourceFile": "PRD_Implementation_Focused.md",
    "generatedAt": "2023-07-10"
  }
}