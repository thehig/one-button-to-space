# Task ID: 22
# Title: Develop Comprehensive Test Suite for logger-ui Package
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Create a complete test suite for the logger-ui package that covers hook logic, component rendering, user interactions, and context usage using React Testing Library.
# Details:
Implement a comprehensive test suite for the logger-ui package following these requirements:

1. **Hook Testing**:
   - Test all custom hooks in the package (e.g., useLogger, useLoggerContext)
   - Verify hooks properly manage state and respond to changes
   - Test error handling and edge cases
   - **Specific Hook Testing Plan**:
     - **`useComponentLayout`**:
       - Verify layout state management (position, size, visibility)
       - Test initial state, toggle visibility, update position (drag simulation)
       - Test update size (resize simulation) and boundary checks
     - **`useEventFiltering`**:
       - Verify log event filtering logic
       - Test initial state, text filtering (including case sensitivity)
       - Test source filtering, level filtering, combined filters
       - Test filter clearing and input debouncing (if applicable)

2. **Component Testing**:
   - Test all UI components for proper rendering
   - Verify components display correct information based on props
   - Test component lifecycle behaviors
   - Ensure accessibility standards are met
   - **Specific Component Testing Plan**:
     - **`GameEventLog.tsx`**: 
       - Test rendering with prop variations (`startsOpen`, `startsLocked`, `hijackConsoleLogs`, initial layout)
       - Test context wrapping and initial events
       - Verify conditional sections (tree/details)
       - Test visibility/opacity based on state
     - **`TreeNode.tsx`**: 
       - Test rendering with various node structures
       - Test `allowedSources` variations (verify checkbox state)
       - Test `activeSourcesInLog` variations (verify styling)
       - Verify count displays and disabled state

3. **User Interaction Testing**:
   - Test all interactive elements (buttons, inputs, etc.)
   - Verify event handlers are called with correct parameters
   - Test keyboard navigation and shortcuts
   - Simulate user actions and verify expected outcomes
   - **Specific Interaction/Integration Tests (GameEventLog focus)**:
     - **Event Handling:** 
       - Simulate `new-event` from manager -> verify UI updates
       - Test `console.log` hijack -> verify context `logEvent` called & UI updates
       - Test new source event -> verify filter tree updates
     - **Filtering:** 
       - Test text input -> verify list filters
       - Test `TreeNode` checkbox clicks -> verify `allowedSources` updates & list filters
       - Test parent/child checkbox logic
     - **UI Controls:** 
       - Test clear button -> verify `clearLog` called & UI clears
       - Test toggle visibility -> verify state change & window visibility
       - Test lock button -> verify state change & Rnd props toggle
       - Test toggle tree/details -> verify sections visibility
     - **Window Management:** 
       - Simulate Rnd drag/resize -> verify layout state updates via hook

4. **Context Testing**:
   - Test LoggerContext provider and consumer behavior
   - Verify context values are properly passed to components
   - Test context updates and their effects on dependent components
   - **Specific Context Testing Plan**:
     - Render consumer -> verify received values (`events`, `clearLog`, `logEvent`)
     - Test provider props (`maxLogSize`, `redirectEventsToConsole`) -> verify manager methods called (mock manager singleton)
     - Mock manager -> emit `new-event`/`log-cleared` -> verify context `events` state updates
     - Call context `clearLog` -> verify manager `clearLog` called

Use React Testing Library as the primary testing tool. Organize tests in a structure that mirrors the package's component hierarchy. Mock external dependencies as needed. Aim for at least 80% test coverage.

# Test Strategy:
The implementation will be verified through the following approach:

1. **Code Review**:
   - Verify test files exist for all components, hooks, and contexts
   - Check that tests follow React Testing Library best practices
   - Ensure tests are well-organized and maintainable

2. **Test Coverage Analysis**:
   - Run coverage reports to ensure at least 80% code coverage
   - Identify and address any gaps in test coverage
   - Verify all critical paths are tested

3. **Test Quality Verification**:
   - Confirm tests include positive and negative scenarios
   - Verify edge cases are covered
   - Check that tests are deterministic (no flaky tests)

4. **Specific Test Cases to Verify**:
   - Hook initialization and state management
   - Component rendering with various prop combinations
   - Error states and boundary conditions
   - User interactions (clicks, inputs, etc.)
   - Context provider behavior and consumer updates
   - Accessibility compliance
   - **Hook-Specific Test Cases**:
     - For `useComponentLayout`: Initial state, visibility toggling, position updates, size updates, boundary conditions
     - For `useEventFiltering`: Filter application, text search, source/level filtering, combined filters, filter reset
   - **Component-Specific Test Cases**:
     - For `GameEventLog`: Prop variations, context integration, conditional rendering, state-based visibility
     - For `TreeNode`: Node structure rendering, source filtering, styling based on active sources
   - **Interaction-Specific Test Cases**:
     - Event handling: Manager events to UI updates, console hijacking, source filtering
     - UI controls: Clear button, visibility toggle, lock button, tree/details toggle
     - Window management: Drag and resize operations

5. **CI Integration**:
   - Ensure tests run successfully in the CI pipeline
   - Verify tests complete in a reasonable time

6. **Testing Tools**:
   - Use `renderHook` and `act` from React Testing Library for hook testing
   - Implement appropriate mocks for dependencies
   - Use mock functions to verify context and manager interactions

# Subtasks:
## 1. Implement CommunicationManager Test Suite [pending]
### Dependencies: None
### Description: Create a comprehensive test suite for the CommunicationManager singleton class to achieve full coverage of its functionality.
### Details:
Implementation steps:
1. Create CommunicationManager.test.ts file in the appropriate test directory
2. Test singleton pattern implementation (getInstance returns same instance)
3. Test logEvent method (verify event addition, max size trimming, and event emission)
4. Test clearLog method (verify events cleared and clear event emitted)
5. Test event listener methods (on, off) with various event types
6. Test configuration methods (setMaxLogSize, setRedirectEventsToConsole)
7. Test getEventLog method returns correct event array
8. Use jest.spyOn for emission verification and mock timers if needed

Testing approach:
- Use isolated unit tests with proper setup/teardown to reset singleton between tests
- Mock EventEmitter functionality where needed
- Test edge cases like empty logs, max size boundaries
- Verify event structure and timestamps
- Ensure 100% coverage of this critical class

## 2. Create GameEventLogConfig Test Suite [pending]
### Dependencies: None
### Description: Develop tests for the GameEventLogConfig module focusing on tree manipulation functions and configuration state management.
### Details:
Implementation steps:
1. Create GameEventLogConfig.test.ts file if not exists or extend existing file
2. Test buildTreeFromConfig function with various input configurations
   - Test with empty config
   - Test with single level sources
   - Test with nested source hierarchies
   - Test with custom labels and IDs
3. Test findNodeById function
   - Test finding nodes at different levels
   - Test with non-existent IDs
   - Test with empty trees
4. Test updateNodeState function
   - Test enabling/disabling nodes
   - Test parent/child relationship updates
   - Test state propagation through the tree
5. Test getAllSourceIds function
   - Test with various tree structures
   - Verify all IDs are collected correctly

Testing approach:
- Create sample tree configurations for testing
- Use snapshot testing for complex tree structures
- Test edge cases and boundary conditions
- Verify tree integrity after operations
- Aim for 100% coverage of this module

## 3. Implement Utility Functions Test Suite [pending]
### Dependencies: None
### Description: Create tests for utility functions in utils.ts to ensure proper behavior of helper functions used throughout the package.
### Details:
Implementation steps:
1. Create or extend utils.test.ts file
2. Test getContrastColor function
   - Test with various background colors (light, dark, edge cases)
   - Verify correct contrast color returned (black or white)
   - Test with invalid inputs if applicable
3. Test formatTimestamp function
   - Test with various date inputs
   - Verify correct formatting with expected output
   - Test with edge cases (null, invalid dates)
4. Test debounce function
   - Use jest.useFakeTimers() to control timing
   - Test function called after delay
   - Test function not called before delay
   - Test multiple rapid calls only execute once
   - Test with different delay values
   - Test cancellation functionality if implemented

Testing approach:
- Use precise assertions for expected outputs
- For debounce, use jest timer mocks to avoid actual waiting
- Test edge cases thoroughly
- Ensure timing-sensitive tests are reliable
- Aim for 100% coverage of utility functions

## 4. Enhance GameEventLog Component Test Coverage [pending]
### Dependencies: 22.1, 22.2, 22.3
### Description: Improve test coverage for the GameEventLog component by testing additional UI states, event handlers, and rendering edge cases.
### Details:
Implementation steps:
1. Extend existing GameEventLog.test.tsx file
2. Test Rnd event handlers
   - Test handleDragStop with various position values
   - Test handleResizeStop with different size values
   - Verify layout state updates correctly
3. Test UI state combinations not yet covered
   - Test with empty event logs
   - Test with very large event logs
   - Test with various filter combinations active
4. Test data panel and tree rendering edge cases
   - Test with no sources configured
   - Test with all sources disabled
   - Test with mixed enabled/disabled sources
5. Test console log hijacking functionality
   - Verify console.log calls are captured when enabled
   - Verify original console.log behavior when disabled
6. Test window visibility and opacity states
   - Test transitions between visible/hidden states
   - Test locked/unlocked state effects on Rnd component

Testing approach:
- Use React Testing Library for component rendering and interaction
- Mock CommunicationManager where needed
- Use screen queries and user-event for interactions
- Verify DOM structure and state changes
- Focus on uncovered code paths identified in coverage report
- Use test coverage reports to identify specific uncovered lines

## 5. Fix Linting Errors and Improve useEventFiltering Coverage [pending]
### Dependencies: 22.1, 22.2, 22.3, 22.4
### Description: Address linting errors in test files and improve test coverage for useEventFiltering hook to reach coverage targets.
### Details:
Implementation steps:
1. Fix linting errors in CommunicationContext.test.tsx
   - Address the two @typescript-eslint/no-explicit-any errors on lines 183 and 195
   - Replace 'as any' with proper type definitions for mockImplementation
   - Create proper type definitions for the spy functions if needed
   - Ensure tests still pass after fixing lint errors
2. Enhance useEventFiltering.test.tsx
   - Add tests for uncovered lines 55-56 (likely related to specific filter conditions)
   - Add tests for uncovered lines 62-72 (likely effect branches or specific filter/count logic)
   - Test edge cases like empty event lists with filters applied
   - Test filter combinations not yet covered
3. Run final coverage report
   - Verify overall coverage exceeds 80%
   - Address any remaining small gaps
4. Run linting on all test files
   - Fix any additional linting issues discovered

Testing approach:
- Use React Testing Library's renderHook for testing hooks
- Create comprehensive test fixtures with various event types
- Test all filter combinations thoroughly
- Verify filter state and filtered results match expectations
- Use coverage reports to target specific uncovered lines
- Ensure all tests pass linting checks

