# Task ID: 17
# Title: Migrate Physics Visualizer to React-based Architecture
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create a new Vite+React implementation of the physics visualizer while preserving all existing functionality and keeping the physics engine untouched.
# Details:
Create a new React-based implementation of the physics visualizer to replace the current DOM-based UI:

1. Setup:
   - Create a new directory (packages/shared/src/visualizer/react or a new visualizer-client package)
   - Initialize a Vite+React project with TypeScript support
   - Configure build outputs to not interfere with existing exports
   - Add necessary dependencies (React, Vite, etc.)

2. Component Architecture:
   - Design a component hierarchy that mirrors the current UI structure
   - Create React components for:
     - Main visualizer container
     - Scenario selector
     - Simulation controls (play/pause, speed, reset)
     - Information panels
     - Camera controls
     - Visualization canvas/container
   - Use React state management (useState, useContext) for UI state
   - Use refs for any necessary direct DOM interaction with canvas

3. Physics Integration:
   - Import and use the existing PhysicsEngine without modifications
   - Connect React component lifecycle methods (useEffect) to physics simulation loop
   - Ensure all scenario loading/switching works with the existing code

4. Layout Implementation:
   - Replace Masonry.js with either:
     - CSS Grid/Flexbox layout
     - React-based Masonry library (e.g., react-masonry-css)
   - Ensure responsive design is maintained

5. Build/Dev Configuration:
   - Update package.json with new scripts for:
     - Development server for the React visualizer
     - Building the visualizer
   - Ensure the visualizer is not included in the main shared package exports

6. Documentation:
   - Create a README.md in the new directory explaining:
     - Architecture decisions
     - Component structure
     - How to run/build the visualizer
     - Migration strategy and rationale

Important constraints:
- Do not modify any physics engine code or scenario logic
- Do not change any existing exports from the shared package
- Do not modify any unit tests
- Ensure all existing visualizer features are preserved

# Test Strategy:
Testing should verify that the React-based visualizer maintains feature parity with the original implementation:

1. Manual Testing Checklist:
   - Verify all scenarios load correctly and can be selected from the UI
   - Confirm simulation controls (play/pause, speed, reset) function as expected
   - Test all camera controls and viewpoint adjustments
   - Verify all information panels display correct data
   - Check that the layout is responsive and properly organized
   - Test across different browsers (Chrome, Firefox, Safari)
   - Verify performance is comparable to the original visualizer

2. Integration Testing:
   - Create a test script that loads each available scenario and verifies rendering
   - Compare screenshots of key states between old and new visualizers
   - Verify that physics simulation results are identical between implementations

3. Validation Approach:
   - Create a side-by-side comparison mode where both visualizers run the same scenario
   - Document any visual or behavioral differences
   - Have another team member review the implementation for React best practices
   - Verify the build process works correctly and doesn't interfere with existing code

4. Acceptance Criteria:
   - All existing features are present and functional
   - No modifications to physics engine or scenario code
   - Clean separation between old and new visualizer code
   - Documentation is complete and accurate
   - Build/dev scripts work as expected

# Subtasks:
## 1. Set up Vite+React project structure for the physics visualizer [pending]
### Dependencies: None
### Description: Create and configure the initial React project structure using Vite, with TypeScript support and proper build configuration.
### Details:
Implementation steps:
1. Create a new directory at `packages/shared/src/visualizer/react`
2. Initialize a new Vite project with React and TypeScript template: `npm create vite@latest . -- --template react-ts`
3. Configure `vite.config.ts` to:
   - Set the build output directory to avoid conflicts with existing code
   - Configure proper library mode with appropriate entry points
   - Set up path aliases for easier imports
4. Install necessary dependencies:
   - Core: `react`, `react-dom`
   - Dev: `@types/react`, `@types/react-dom`, `typescript`, `vite`
5. Update `tsconfig.json` to ensure compatibility with the existing codebase
6. Create a basic folder structure:
   - `/components` - For React components
   - `/hooks` - For custom React hooks
   - `/context` - For React context providers
   - `/utils` - For utility functions
7. Create a minimal entry point that exports the main visualizer component
8. Add scripts to package.json:
   - `dev:visualizer`: Run development server
   - `build:visualizer`: Build production version

Testing approach:
- Verify the project builds without errors
- Ensure development server starts correctly
- Confirm the project structure follows React best practices

## 2. Create core React component architecture and state management [pending]
### Dependencies: 17.1
### Description: Design and implement the component hierarchy that mirrors the current UI structure with proper state management.
### Details:
Implementation steps:
1. Analyze the existing DOM-based UI structure to identify key components
2. Create the following React components:
   - `Visualizer`: Main container component
   - `ScenarioSelector`: Dropdown for selecting physics scenarios
   - `SimulationControls`: Play/pause, speed slider, and reset buttons
   - `InfoPanel`: Display simulation statistics and information
   - `CameraControls`: Pan, zoom, and view reset controls
   - `VisualizationCanvas`: Container for the actual physics rendering
3. Implement state management:
   - Create a `VisualizerContext` using React Context API to share state across components
   - Define state for:
     - Current scenario
     - Simulation status (running/paused)
     - Simulation speed
     - Camera position and zoom level
     - UI configuration options
4. Create custom hooks:
   - `useVisualizerState`: For accessing and updating visualizer state
   - `useScenario`: For scenario management
5. Implement basic component rendering without physics integration
6. Set up proper prop types and TypeScript interfaces for all components

Testing approach:
- Render components in isolation to verify they display correctly
- Test state updates through the context provider
- Verify component hierarchy matches the existing UI structure
- Ensure all UI interactions update state correctly

## 3. Integrate existing physics engine with React components [pending]
### Dependencies: 17.2
### Description: Connect the existing physics engine to the React component lifecycle and implement the visualization rendering.
### Details:
Implementation steps:
1. Import the existing PhysicsEngine from the shared package
2. Create a `usePhysicsEngine` hook that:
   - Initializes the physics engine
   - Connects to the animation loop using `requestAnimationFrame`
   - Handles play/pause functionality
   - Controls simulation speed
   - Manages scenario loading and switching
3. Implement the `VisualizationCanvas` component:
   - Create a canvas ref using `useRef`
   - Set up the canvas for rendering in `useEffect`
   - Connect the physics engine's render method to the canvas
   - Implement proper cleanup in the effect's return function
4. Connect simulation controls to the physics engine:
   - Play/pause button toggles simulation
   - Speed slider adjusts simulation speed
   - Reset button resets the current scenario
5. Implement scenario selection:
   - Load available scenarios from the physics engine
   - Handle scenario switching while preserving state
6. Add event listeners for user interactions (mouse/touch events)
7. Ensure all physics engine callbacks and events are properly connected

Testing approach:
- Verify the physics engine initializes correctly
- Test play/pause functionality
- Confirm scenario switching works
- Check that simulation speed changes take effect
- Ensure the animation loop runs efficiently
- Test that cleanup functions prevent memory leaks

## 4. Implement responsive layout and replace Masonry.js [pending]
### Dependencies: 17.2, 17.3
### Description: Create a responsive layout using modern CSS techniques or React-based alternatives to replace Masonry.js.
### Details:
Implementation steps:
1. Analyze the current Masonry.js implementation to understand layout requirements
2. Choose an implementation approach:
   - Option A: Use CSS Grid/Flexbox for layout
     - Implement a responsive grid layout using CSS Grid
     - Use media queries for different screen sizes
     - Add CSS transitions for smooth resizing
   - Option B: Integrate a React-based Masonry library
     - Install `react-masonry-css` or similar library
     - Configure to match current layout behavior
3. Implement the layout container component:
   - Create a `VisualizerLayout` component that handles the overall layout
   - Implement responsive breakpoints for different screen sizes
4. Style all components using:
   - CSS Modules for component-specific styles
   - Global styles for shared elements
5. Implement information panels layout:
   - Create collapsible/expandable panels
   - Ensure proper spacing and alignment
6. Add responsive behavior for mobile devices:
   - Adjust controls for touch interfaces
   - Implement mobile-friendly layout changes
7. Ensure all UI elements maintain proper positioning during resizing

Testing approach:
- Test layout at various screen sizes
- Verify panels resize and reposition correctly
- Check that the layout matches the current visualizer's appearance
- Test on different devices and browsers
- Ensure touch controls work on mobile devices

## 5. Finalize build configuration and documentation [pending]
### Dependencies: 17.1, 17.2, 17.3, 17.4
### Description: Complete the build configuration, ensure all features are working, and create comprehensive documentation.
### Details:
Implementation steps:
1. Finalize the Vite build configuration:
   - Configure proper output formats (ESM, CJS if needed)
   - Set up tree-shaking and code splitting
   - Optimize asset handling
   - Configure environment variables
2. Update package.json:
   - Add all necessary scripts for development and building
   - Ensure proper peer dependencies are listed
   - Configure package exports to not interfere with existing code
3. Perform comprehensive testing of all features:
   - Verify all existing visualizer features work in the React version
   - Test performance compared to the original implementation
   - Ensure all scenarios load and run correctly
4. Create documentation:
   - Write a detailed README.md in the new directory covering:
     - Project overview and architecture decisions
     - Component structure and relationships
     - State management approach
     - How to run/build the visualizer
     - How to extend with new components
     - Migration strategy and rationale
   - Add inline code documentation for complex logic
   - Create example usage snippets
5. Implement any final optimizations:
   - Performance improvements
   - Code cleanup
   - Accessibility enhancements

Testing approach:
- Perform end-to-end testing of the complete visualizer
- Verify build output works when imported
- Check documentation for completeness and accuracy
- Ensure all existing features are preserved and working correctly
- Validate that no physics engine code was modified

