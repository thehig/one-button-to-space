# Product Requirements Document: One Button to Space

## 1. Introduction

*   **Project Name:** One Button to Space
*   **Goal:** Create a 2D physics-based puzzle game for web browsers, challenging players to navigate a rocket using device tilt and single-touch thrust to complete missions.
*   **Target Audience:** Players who enjoy physics-based puzzle games and challenges.
*   **Gameplay Inspiration:** Lunar Lander, physics simulators.
*   **Unique Selling Point:** Focus on realistic and engaging 2D physics simulation (gravity gradients, air resistance, cargo physics) controlled by intuitive tilt and single-touch input.

## 2. Core Gameplay Mechanics

*   **Control Scheme:**
    *   **World Tilt (Mobile):** Player uses device accelerometer (`DeviceOrientationEvent` providing beta/gamma). The `DeviceOrientationManager` calculates the target rocket angle based on physical tilt, adjusted for landscape mode.
    *   **World Tilt (Desktop/Simulation):** The horizontal (X) position of the mouse cursor simulates device tilt (gamma, range -180 to +180 degrees). The `DeviceOrientationManager` calculates the target rocket angle directly from the simulated gamma.
    *   **Input Prioritization:** The system uses the most recently active input source (real device vs. mouse simulation) that registered a significant change. A 1-second cooldown prevents mouse input from immediately overriding after significant real device input.
    *   **Rocket Thrust:** A single touch/click anywhere on the screen OR pressing the Spacebar activates the rocket's main thruster in the direction the rocket is currently facing.
*   **Physics Simulation:**
    *   **Variable Gravity:** Gravity strength increases as the rocket approaches celestial bodies (e.g., planets, moons), simulating orbital mechanics and ground-level gravity. Minimal gravity in "deep space".
    *   **Air Resistance:** Atmospheric density increases closer to planetary surfaces, affecting rocket maneuverability and potentially causing heating effects (future feature).
    *   **Collision Physics:** Realistic collisions between the rocket, terrain, cargo, and other objects.
    *   **Cargo Physics:** Cargo items are distinct physics entities. They can be carried internally or externally (e.g., attached by a flexible connector like a rope or spring), affecting the rocket's handling.
*   **Objective:** Fly the rocket between locations (e.g., bases, points of interest) to complete mission objectives, primarily involving picking up and delivering cargo.

## 3. Core Loop & Progression

*   **Mission Structure:**
    1.  Player receives a mission at a starting location (e.g., moonbase, space station). Missions typically involve transporting specific cargo to a destination.
    2.  Player navigates the 2D space (potentially across different gravity/atmosphere zones) to locate the pickup point.
    3.  Player maneuvers to pick up the cargo (interaction mechanism TBD).
    4.  Player transports the cargo to the designated destination, managing fuel/constraints and physics challenges.
    5.  Upon successful delivery, the player receives a reward (details TBD) and can access new missions available at that location.
*   **Progression:** Players unlock new locations and potentially more complex missions as they succeed. Future progression could involve ship upgrades.

## 4. Constraints & Resources (Initial Focus on Physics)

*   **Initial Constraints:** The primary challenge initially comes from mastering the physics simulation (gravity, air resistance, momentum, cargo handling).
*   **Future Constraints:** Potential future additions include:
    *   Fuel limitations (efficiency tied to thrust usage).
    *   Time limits for missions.
    *   Air supply (for crewed missions).
    *   Cargo fragility.
    *   Re-entry heating (linked to wings/descent speed).

## 5. Scoring & Winning/Losing

*   **Winning:** Successfully completing the mission objective (e.g., delivering cargo to the correct destination).
*   **Losing:** Failing the mission (e.g., crashing the rocket, losing critical cargo, running out of a vital resource like fuel - future).
*   **Scoring:** Deterministic scoring based on performance metrics like:
    *   Time taken.
    *   Fuel consumed.
    *   Resources remaining (if applicable).
    *   Potentially bonus points for efficiency or skill.

## 6. Art Style & Audio

*   **Visuals:** Start with simple geometric shapes for the rocket, terrain, and objects. Aim to incorporate free/open-source 2D space-themed assets later for enhanced visuals. Focus on clear communication of physics states.
*   **Audio:** Simple, 8-bit style sound effects for thrust, collisions, mission events, and potentially background music loops suitable for the space/retro theme.

## 7. Platform & Technology

*   **Target Platform:** Web Browsers supporting HTML5 and accelerometer APIs (Desktop & Mobile).
*   **Technology Stack (Proposed):**
    *   Language: TypeScript
    *   Rendering: HTML5 Canvas or WebGL (potentially via a library like Phaser.js or Pixi.js)
    *   Physics Engine: A suitable 2D JavaScript physics engine (e.g., Matter.js, Planck.js)

## 8. Future Features / Stretch Goals

*   Ship Upgrades: Different engines (thrust/efficiency), wings (aerodynamics vs. heating), cargo bays, connector types.
*   More complex mission types (rescue, exploration, construction).
*   Environmental hazards (asteroid fields, radiation zones).
*   Online leaderboards.
*   More detailed visual assets and animations. 