---
description: 
globs: 
alwaysApply: true
---
-   **Use `CommunicationManager` for Logging in Phaser Code**
    -   To ensure logs are centralized and displayed in the `GameEventLog` UI component, all logging within Phaser Scenes and Managers (`client/src/phaser/`) MUST use the `CommunicationManager`.
    -   ❌ **DO NOT** use `console.log`, `console.warn`, `console.error`, `console.debug`, or `console.group` directly in Phaser manager or scene files. The only exception is for clearly marked, temporary debugging intended for immediate removal.

-   **Logging within Manager Classes (`client/src/phaser/managers/*.ts`)**
    -   Managers MUST accept an instance of `CommunicationManager` in their constructor, typically passed by the `LifecycleManager`.
    -   Store the instance as a private property (e.g., `this.communicationManager`).
    -   Call `this.communicationManager.logEvent(source, eventName, data)` for logging.
    -   ✅ **DO:**
        ```typescript
        // Example within a Manager class
        import { CommunicationManager } from "./CommunicationManager";

        export default class MyManager {
          private communicationManager: CommunicationManager;

          constructor(communicationManager: CommunicationManager) {
            this.communicationManager = communicationManager;
            this.communicationManager.logEvent("MyManager", "constructor");
          }

          someMethod(value: number) {
            this.communicationManager.logEvent("MyManager", "someMethodCalled", { value });
            // ... logic ...
          }
        }
        ```
    -   ❌ **DON'T:**
        ```typescript
        // Example within a Manager class - INCORRECT
        export default class MyManager {
          constructor() {
            console.log("MyManager: constructor"); // WRONG - Use logEvent
          }

          someMethod(value: number) {
            console.log("Some method called with value:", value); // WRONG - Use logEvent
          }
        }
        ```
    -   Reference [LifecycleManager.ts](mdc:client/src/phaser/managers/LifecycleManager.ts) and other managers for examples.

-   **Logging within Scene Classes (`client/src/phaser/scenes/*.ts`)**
    -   Scenes SHOULD obtain the `CommunicationManager` instance via the singleton accessor: `CommunicationManager.getInstance()`.
    -   Call `CommunicationManager.getInstance().logEvent(source, eventName, data)` for logging.
    -   ✅ **DO:**
        ```typescript
        // Example within a Scene class
        import Phaser from "phaser";
        import { CommunicationManager } from "../managers/CommunicationManager";

        export default class MyScene extends Phaser.Scene {
          preload() {
            CommunicationManager.getInstance().logEvent("MyScene", "preload");
            // ...
          }

          create() {
            CommunicationManager.getInstance().logEvent("MyScene", "create");
            const button = this.add.text(100, 100, "Click Me").setInteractive();
            button.on('pointerdown', () => {
              CommunicationManager.getInstance().logEvent("MyScene", "buttonClick", { buttonLabel: "Click Me" });
              // ...
            });
          }
        }
        ```
    -   ❌ **DON'T:**
        ```typescript
        // Example within a Scene class - INCORRECT
        import Phaser from "phaser";

        export default class MyScene extends Phaser.Scene {
          preload() {
            console.log("MyScene: preload"); // WRONG - Use logEvent
          }

          create() {
            console.log("MyScene: create"); // WRONG - Use logEvent
            const button = this.add.text(100, 100, "Click Me").setInteractive();
            button.on('pointerdown', () => {
              console.log("Button clicked"); // WRONG - Use logEvent
            });
          }
        }
        ```
    -   Reference [BootScene.ts](mdc:client/src/phaser/scenes/BootScene.ts) or [GameScene.ts](mdc:client/src/phaser/scenes/GameScene.ts) for examples.

-   **`logEvent` Parameters**
    -   `source` (string): The name of the class or logical component generating the log (e.g., `"PhysicsManager"`, `"MainMenuScene"`).
    -   `eventName` (string): A descriptive CamelCase or kebab-case name for the event being logged (e.g., `"initStart"`, `"entitySpawned"`, `"buttonClick"`).
    -   `data` (optional object): A plain object containing relevant contextual data for the event. Ensure data is serializable if it might originate from or be sent over the network.

-   **Temporary Debugging Exception**
    -   Occasional, temporary use of `console.log` for active debugging is acceptable *if* it is clearly marked (e.g., with a `// TEMP DEBUG` comment) and removed before committing. Do not leave temporary `console.log` statements in the codebase.
