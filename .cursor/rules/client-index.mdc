---
description: 
globs: 
alwaysApply: true
---
# Client Package Index

This document provides an overview of the `client` package structure to aid navigation and understanding.

-   **`client/` (Root)**
    -   `index.html`: Main HTML entry point for the Vite application.
    -   `package.json`: Project dependencies and scripts for the client.
    -   `vite.config.ts`: Vite build configuration.
    -   `tsconfig.json`, `tsconfig.app.json`, `tsconfig.node.json`: TypeScript configuration files.
    -   `public/`: Static assets served directly by Vite.
    -   `src/`: Main source code directory.

-   **`client/src/`**
    -   `main.tsx`: Application entry point, renders the root React component (`App.tsx`).
    -   `App.tsx`: Root React component, likely sets up routing and global layout.
    -   `index.css`, `App.css`: Global and App-level CSS styles.
    -   `components/`: Directory for reusable React UI components. (Further exploration needed for specifics)
    -   `contexts/`: Directory for React Context API providers/consumers (e.g., for state management, themes). (Further exploration needed)
    -   `phaser/`: Contains the Phaser game logic, scenes, and related code. (Crucial for game mechanics)
        -   *Requires deeper inspection to map out scenes and core game loop.*
    -   `assets/`: Game assets (images, sounds, etc.) processed by the build.
    -   `types/`: TypeScript type definitions specific to the client.
    -   `index.ts`: Likely re-exports modules or types from within `src`.

-   **`client/src/phaser/managers/`**
    -   **`LifecycleManager.ts`**: Central coordinator for all other managers. Instantiates them and drives their `init`, `create`, `update`, `shutdown` cycles based on the Phaser Scene lifecycle.
    -   **`CommunicationManager.ts`**: Singleton event hub and logger. Subscribes to events from various sources (other managers, network via emitter) and logs them. Can provide this log externally (e.g., to React).
    -   **`PhysicsManager.ts`**: Manages the Matter.js physics simulation (using shared `PhysicsEngine`), creates/removes physics bodies for entities, and syncs GameObject positions.
    -   **`EntityManager.ts`**: Manages game entities (GameObjects). Creates/destroys entities based on network events, links them to physics bodies via `PhysicsManager`, and tracks active entities.
    -   **`InputManager.ts`**: Captures keyboard and pointer input, emitting events like `inputUpdate` and `pointerDown`.
    -   **`NetworkManager.ts`**: (Partially implemented) Intended to handle Colyseus connection, room joining, sending input, and receiving server state/events.
    -   **`CameraManager.ts`**: Controls the main Phaser camera, sets background/bounds, and follows the player entity once created.
    -   **`UIManager.ts`**: Creates and updates static UI elements (like score display) fixed to the camera.
    -   **`AudioManager.ts`**: (Partially implemented) Intended to load, play, and manage sound effects and music based on events.

-   **Key Technologies**
    -   **Framework:** React ([react.mdc](mdc:.cursor/rules/react.mdc))
    -   **Build Tool:** Vite
    -   **Game Engine:** Phaser ([phaser.mdc](mdc:.cursor/rules/phaser.mdc))
    -   **Physics (likely via Phaser):** Matter.js
    -   **Language:** TypeScript ([typescript.mdc](mdc:.cursor/rules/typescript.mdc))

-   **Navigation Notes for LLMs**
    -   UI changes likely involve files in `client/src/components/` and `client/src/App.tsx`.
    -   Game logic modifications will primarily be within `client/src/phaser/`.
    -   Shared types might be in `client/src/types/` or imported from the `shared` package.
    -   Refer to linked `.mdc` rules for technology-specific guidelines.
    -   Need to explore `components`, `contexts`, and `phaser` directories further for a more detailed map.
