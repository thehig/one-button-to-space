---
description:
globs:
alwaysApply: false
---
# Multiplayer Synchronization Architecture

This document outlines the architecture used for synchronizing game state, particularly physics, between the server and clients.

- **Authoritative Server**
  - The server (`[GameRoom.ts](mdc:packages/server/src/rooms/GameRoom.ts)`) runs the definitive physics simulation using `Matter.js` via `[ServerPhysicsManager.ts](mdc:packages/server/src/physics/ServerPhysicsManager.ts)`.
  - It operates on a fixed timestep loop (`setInterval` in `GameRoom.onCreate`).
  - **Shared Logic:** It uses shared physics calculation functions (`[PhysicsLogic.ts](mdc:packages/shared/src/physics/PhysicsLogic.ts)`) for environmental forces like gravity and air resistance, ensuring consistency with the client.

- **Client Input Flow**
  - The client (`[MainScene.ts](mdc:packages/client/src/game/scenes/MainScene.ts)`) captures player actions (thrust, orientation changes).
  - Inputs are formatted as `PlayerInputMessage` and sent to the server via `MultiplayerService.sendPlayerInput` (triggered by `MainScene.sendInput`).

- **Server Input Processing & Simulation**
  - The `GameRoom` queues incoming `player_input` messages.
  - *Before* each fixed physics step, the server processes the input queue for each player (applying thrust state changes, setting angles on `Matter.Body`).
  - It then applies environmental forces (gravity, drag) using the shared physics logic.
  - Finally, it calls `Matter.Engine.update` to advance the simulation.

- **Server State Broadcasting**
  - *After* the physics step, the server updates its Colyseus `RoomState` based on the `Matter.Body` properties (`GameRoom.updatePlayerStatesFromPhysics`).
  - It calculates a *delta state* containing only properties that have changed significantly (based on `SYNC_THRESHOLD_*` constants) compared to the last broadcast state.
  - It broadcasts *only* the delta state to all clients via the `physics_update` message.

- **Client Reconciliation & Smoothing**
  - The client (`[MainScene.ts](mdc:packages/client/src/game/scenes/MainScene.ts)`) receives the `physics_update` delta message (`MainScene.handlePhysicsUpdate`).
  - **Local Player:**
    - It *does not* simply snap the local state to the server state.
    - Instead, it *gradually corrects* the local player's `Matter.Body` properties (position, angle, velocity) towards the authoritative server state using interpolation (`Phaser.Math.Linear`, `Phaser.Math.Angle.RotateTo`) and the `CLIENT_PHYSICS_CORRECTION_FACTOR`.
    - It *also* updates the `targetX/Y/Angle` properties on the local `Rocket` instance.
    - The `Rocket.update` method then visually interpolates the `GameObject` towards these targets for smooth rendering.
    - **Note:** The client *no longer* applies input forces (like thrust) predictively to its local physics body.
  - **Remote Players:**
    - The client sets the underlying `Matter.Body` properties of remote rockets more directly based on the server state (likely for collision calculations).
    - It sets the `targetX/Y/Angle` properties on the remote `Rocket` instances.
    - The `Rocket.update` method visually interpolates the `GameObject` towards these targets for smooth rendering.

## Key Principles

- **Server Authority:** The server's physics simulation is the source of truth.
- **Input Sending:** Clients inform the server of their intended actions.
- **Delta Compression:** Minimizes network traffic by sending only changed state.
- **Client-Side Correction & Interpolation:** Smooths visual representation and corrects local state gradually to handle latency without snapping or heavy client-side prediction.
